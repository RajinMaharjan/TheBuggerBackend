// <auto-generated />
using System;
using Excallibur.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(QaLintDbContext))]
    partial class QaLintDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Excallibur.Domain.Entites.Device", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("device_name");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("device_type");

                    b.Property<string>("DeviceVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("device_version");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("TesterId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("tester_id");

                    b.HasKey("Id");

                    b.HasIndex("TesterId");

                    b.ToTable("DeviceSpecifications");
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.Experience", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("ExperienceMonth")
                        .HasMaxLength(2)
                        .HasColumnType("INT(2)")
                        .HasColumnName("exeprience_month");

                    b.Property<string>("ExperienceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("exeprience_name");

                    b.Property<int>("ExperienceYear")
                        .HasMaxLength(2)
                        .HasColumnType("INT(2)")
                        .HasColumnName("exeprience_year");

                    b.Property<string>("ExperinceDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("exeprience_description");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("TesterId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("tester_id");

                    b.HasKey("Id");

                    b.HasIndex("TesterId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.Qualification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("QualificationCourse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("qualification_course");

                    b.Property<DateOnly>("QualificationEndDate")
                        .HasColumnType("date");

                    b.Property<string>("QualificationOrganization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("qualification_organization");

                    b.Property<string>("QualificationSpecialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("qualification_specialization");

                    b.Property<DateOnly>("QualificationStartDate")
                        .HasColumnType("date");

                    b.Property<string>("QualificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("qualification_type");

                    b.Property<string>("TesterId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("tester_id");

                    b.HasKey("Id");

                    b.HasIndex("TesterId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.QuizOption", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("last_updated_by");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("name");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = "c8f78abb-282f-4fab-9c94-3cd292ed0976",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5326),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Non-functional requirements only not Functional requirements",
                            QuestionId = "df811d72-625a-4346-b9af-4da5f112d2e3"
                        },
                        new
                        {
                            Id = "a5c6284d-6683-4744-a08e-c4c3c3ece5f1",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5349),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Functional requirements only not non-functional requirements",
                            QuestionId = "df811d72-625a-4346-b9af-4da5f112d2e3"
                        },
                        new
                        {
                            Id = "4958a1a8-86de-458f-b971-4ba851a1a28f",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5363),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Non-functional requirements and Functional requirements",
                            QuestionId = "df811d72-625a-4346-b9af-4da5f112d2e3"
                        },
                        new
                        {
                            Id = "19ddb2d4-9623-4fe7-af06-ea64b5d43dd5",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5382),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Non-functional requirements or Functional requirements",
                            QuestionId = "df811d72-625a-4346-b9af-4da5f112d2e3"
                        },
                        new
                        {
                            Id = "1644762b-80ee-4f88-8c06-0828222f75a6",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5395),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Performance testing",
                            QuestionId = "5a9a2050-fe54-4ea0-b46e-4d22c9262c17"
                        },
                        new
                        {
                            Id = "44a5aac4-fb50-4d10-a6f1-8ad60a53ad84",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5410),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Unit testing",
                            QuestionId = "5a9a2050-fe54-4ea0-b46e-4d22c9262c17"
                        },
                        new
                        {
                            Id = "46a51975-2686-4c8e-9b97-b312e467102d",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5422),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Regression testing",
                            QuestionId = "5a9a2050-fe54-4ea0-b46e-4d22c9262c17"
                        },
                        new
                        {
                            Id = "f8ed2952-462e-47a3-8005-831298c4764c",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5434),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Sanity testing",
                            QuestionId = "5a9a2050-fe54-4ea0-b46e-4d22c9262c17"
                        },
                        new
                        {
                            Id = "da49ef2b-4036-4fdc-ab33-6a4f42f27fd3",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5484),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Open, Assigned, Fixed, Closed",
                            QuestionId = "3db86fc9-d498-4569-adf4-84af90ef0a72"
                        },
                        new
                        {
                            Id = "242d6d1c-ef7f-4275-94ad-3abec166a528",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5586),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Open, Fixed, Assigned, Closed",
                            QuestionId = "3db86fc9-d498-4569-adf4-84af90ef0a72"
                        },
                        new
                        {
                            Id = "26ac2a27-967d-47aa-98fa-068ee18ae85c",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5609),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Assigned, Open, Closed, Fixed",
                            QuestionId = "3db86fc9-d498-4569-adf4-84af90ef0a72"
                        },
                        new
                        {
                            Id = "82b608e8-4da0-463b-b1ea-a169b99aee7a",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5720),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Assigned, Open, Fixed, Closed",
                            QuestionId = "3db86fc9-d498-4569-adf4-84af90ef0a72"
                        },
                        new
                        {
                            Id = "0ad60d0b-4d74-49dd-9a39-82bdb456a96d",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5761),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Reliability",
                            QuestionId = "28856ff5-c18b-42e3-aa99-158e53da22a8"
                        },
                        new
                        {
                            Id = "919a8a1d-b24b-46c0-9d20-8e1d155935d1",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5778),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Usability",
                            QuestionId = "28856ff5-c18b-42e3-aa99-158e53da22a8"
                        },
                        new
                        {
                            Id = "4549c9e0-94f7-4c5e-8bbd-6ddc213ec037",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5792),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Scalability",
                            QuestionId = "28856ff5-c18b-42e3-aa99-158e53da22a8"
                        },
                        new
                        {
                            Id = "26d1dcd7-e6cb-41bc-b513-02b47cbd395f",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5803),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Maintainability",
                            QuestionId = "28856ff5-c18b-42e3-aa99-158e53da22a8"
                        },
                        new
                        {
                            Id = "d04d3aa6-281e-4ddb-b0d1-cd302f456313",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5816),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Finding defects",
                            QuestionId = "9eab715e-48bd-4fd3-896e-caecc38e0fe6"
                        },
                        new
                        {
                            Id = "6f8755d5-6449-4d24-aeaa-136033e04a5f",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5832),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Gaining confidence about the level of quality and providing information",
                            QuestionId = "9eab715e-48bd-4fd3-896e-caecc38e0fe6"
                        },
                        new
                        {
                            Id = "c1821b16-0583-4a45-83f1-18112b0096d3",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5844),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Preventing defects",
                            QuestionId = "9eab715e-48bd-4fd3-896e-caecc38e0fe6"
                        },
                        new
                        {
                            Id = "d5a92d0c-88dc-441c-9dbf-9cf6ae9ae07b",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5862),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Debugging defects",
                            QuestionId = "9eab715e-48bd-4fd3-896e-caecc38e0fe6"
                        },
                        new
                        {
                            Id = "6e077e4b-28b3-45a9-9f97-9e07da1f0ce2",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5917),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Planning and control",
                            QuestionId = "d9fbec6c-5261-42c2-a00e-f16fc49a9cda"
                        },
                        new
                        {
                            Id = "26b8ae43-4eb7-4f22-b0d2-5f735637d09f",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5947),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Test closure activities",
                            QuestionId = "d9fbec6c-5261-42c2-a00e-f16fc49a9cda"
                        },
                        new
                        {
                            Id = "ff3a1042-96b0-49d7-9345-a859e7f00a24",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5962),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Analysis and design",
                            QuestionId = "d9fbec6c-5261-42c2-a00e-f16fc49a9cda"
                        },
                        new
                        {
                            Id = "cf4aeb47-e902-4bc4-ac4e-09e915291f13",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5974),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "None",
                            QuestionId = "d9fbec6c-5261-42c2-a00e-f16fc49a9cda"
                        },
                        new
                        {
                            Id = "2424c93b-7d17-44d0-b88a-bb795c085a0c",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5987),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = " i,ii, and iii",
                            QuestionId = "bf82b49c-458e-4a75-8d3b-fd055fbc8c5d"
                        },
                        new
                        {
                            Id = "687183e6-d1e1-4350-85c3-e4395e431435",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5999),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "ii, iii and iv",
                            QuestionId = "bf82b49c-458e-4a75-8d3b-fd055fbc8c5d"
                        },
                        new
                        {
                            Id = "b396a119-84f5-4466-9fa6-84200999125e",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6011),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "i, ii and iv",
                            QuestionId = "bf82b49c-458e-4a75-8d3b-fd055fbc8c5d"
                        },
                        new
                        {
                            Id = "dc4da15b-fa55-480a-a31e-0843de1a585a",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6031),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "i,iii and iv",
                            QuestionId = "bf82b49c-458e-4a75-8d3b-fd055fbc8c5d"
                        },
                        new
                        {
                            Id = "d343cfcd-3139-4d37-9d74-0dfdd5c978bf",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6043),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = " The system must be able to perform its functions for an average of 23 hours 50 mins Per day",
                            QuestionId = "45986160-b05c-47b8-8c41-ec779a4bd0bc"
                        },
                        new
                        {
                            Id = "28e24e1e-0441-4029-a250-bb60e2f89059",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6054),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "The system must perform adequately for up to 30 users",
                            QuestionId = "45986160-b05c-47b8-8c41-ec779a4bd0bc"
                        },
                        new
                        {
                            Id = "30d759fe-d7c4-42c1-acdb-b4c6a152aebb",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6157),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "The system must allow a user to amend the address of a customer",
                            QuestionId = "45986160-b05c-47b8-8c41-ec779a4bd0bc"
                        },
                        new
                        {
                            Id = "446b94e2-f9b9-47ca-aea4-07fe9c68487b",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6180),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "The system must allow 12,000 new customers per year",
                            QuestionId = "45986160-b05c-47b8-8c41-ec779a4bd0bc"
                        },
                        new
                        {
                            Id = "12a642ad-2050-499d-8f2e-9315d93441dd",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6194),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Quality is job one",
                            QuestionId = "6b0db9f2-11c6-491b-9381-28a2f0089297"
                        },
                        new
                        {
                            Id = "23a2b0d6-da5f-47ad-ba50-620319e8548e",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6210),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Zero defects",
                            QuestionId = "6b0db9f2-11c6-491b-9381-28a2f0089297"
                        },
                        new
                        {
                            Id = "7234807b-2ae2-4b1f-94fb-e52db94b28e7",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6223),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Conformance to requirements",
                            QuestionId = "6b0db9f2-11c6-491b-9381-28a2f0089297"
                        },
                        new
                        {
                            Id = "aa19266c-bbac-489b-bb1c-e3c0f37d2bca",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6241),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Work as designed",
                            QuestionId = "6b0db9f2-11c6-491b-9381-28a2f0089297"
                        },
                        new
                        {
                            Id = "5606aaa5-6942-46b8-8d57-b3bb12ad5ed5",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6256),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Lack of technical documentation",
                            QuestionId = "6a2014ce-e8ea-458a-b254-e27a84220f6b"
                        },
                        new
                        {
                            Id = "6af50cad-f0c1-4103-9d14-5b897f2dcfa4",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6281),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Lack of test tools on the market for developers",
                            QuestionId = "6a2014ce-e8ea-458a-b254-e27a84220f6b"
                        },
                        new
                        {
                            Id = "6aeffff0-fa4c-4ce0-9177-8fd1cde9455e",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6344),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Lack of training",
                            QuestionId = "6a2014ce-e8ea-458a-b254-e27a84220f6b"
                        },
                        new
                        {
                            Id = "0067e3ed-d57b-4452-bb15-7d03b62acfde",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6373),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Lack of Objectivity",
                            QuestionId = "6a2014ce-e8ea-458a-b254-e27a84220f6b"
                        },
                        new
                        {
                            Id = "25614a45-ad5d-4f86-875f-19ab6fc72626",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6389),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "When the code is complete",
                            QuestionId = "ca131cf0-9120-4631-94b9-b623bb8f6966"
                        },
                        new
                        {
                            Id = "91e5a68f-a8cc-432b-935d-e4707055015d",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6411),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "When the design is complete",
                            QuestionId = "ca131cf0-9120-4631-94b9-b623bb8f6966"
                        },
                        new
                        {
                            Id = "4ee1ec22-f0e5-453f-9eea-7022fe5244d5",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6423),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "When the software requirements have been approved",
                            QuestionId = "ca131cf0-9120-4631-94b9-b623bb8f6966"
                        },
                        new
                        {
                            Id = "568863c4-058c-4899-bb82-f9451284cd20",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6436),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "When the first code module is ready for unit testing",
                            QuestionId = "ca131cf0-9120-4631-94b9-b623bb8f6966"
                        },
                        new
                        {
                            Id = "02d99d82-bacc-46bc-b6f0-f415dd04e508",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6444),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Requirements",
                            QuestionId = "e8e31d2c-8ae3-4f87-90d1-838b04b0354b"
                        },
                        new
                        {
                            Id = "18ae6f80-6873-41de-b292-c7640aedea94",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6451),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Design",
                            QuestionId = "e8e31d2c-8ae3-4f87-90d1-838b04b0354b"
                        },
                        new
                        {
                            Id = "e96401f8-38f8-44cc-b7d3-fd5a4379fb26",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6458),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Code",
                            QuestionId = "e8e31d2c-8ae3-4f87-90d1-838b04b0354b"
                        },
                        new
                        {
                            Id = "948ac115-8219-4f3b-b0a5-224f36fc6b34",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6466),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Decision table",
                            QuestionId = "e8e31d2c-8ae3-4f87-90d1-838b04b0354b"
                        },
                        new
                        {
                            Id = "bf3ff765-2faa-4350-81a4-4f4573207c85",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6473),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Poor quality software",
                            QuestionId = "8b7c48d2-5b18-4fa1-a866-799af5a8a795"
                        },
                        new
                        {
                            Id = "668d4904-8b1c-48d0-b147-247d740cefb9",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6481),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Poor software and poor testing",
                            QuestionId = "8b7c48d2-5b18-4fa1-a866-799af5a8a795"
                        },
                        new
                        {
                            Id = "b96c4144-d204-40b9-be5f-46e404c841c4",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6488),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Bad luck",
                            QuestionId = "8b7c48d2-5b18-4fa1-a866-799af5a8a795"
                        },
                        new
                        {
                            Id = "789a597b-d9cb-461a-8119-d2cc85467ece",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6570),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Insufficient time for testing",
                            QuestionId = "8b7c48d2-5b18-4fa1-a866-799af5a8a795"
                        },
                        new
                        {
                            Id = "e413a9f5-dcc7-4ddd-9a3f-897f69758e5d",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6581),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "to show that system will work after release",
                            QuestionId = "5dbe8215-8b4a-4643-8095-4bdd6e681b04"
                        },
                        new
                        {
                            Id = "f2821b02-c69e-4eb5-9986-c2af31ebac91",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6588),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "to decide when the software is of sufficient quality to release",
                            QuestionId = "5dbe8215-8b4a-4643-8095-4bdd6e681b04"
                        },
                        new
                        {
                            Id = "4947abb1-af24-42a4-b376-470ff7daa041",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6594),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "to find as many bugs as possible before release",
                            QuestionId = "5dbe8215-8b4a-4643-8095-4bdd6e681b04"
                        },
                        new
                        {
                            Id = "0c85a6ea-f1d6-4eea-86dc-eb529ef94ac9",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6601),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "to give information for a risk-based decision about release",
                            QuestionId = "5dbe8215-8b4a-4643-8095-4bdd6e681b04"
                        },
                        new
                        {
                            Id = "ebaf8dd8-52d9-4874-90e9-5cbacbb72075",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6607),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "performance testing can be done during unit testing as well as during the testing of whole system",
                            QuestionId = "e1a23107-a828-4106-a2fb-e3241647b0d0"
                        },
                        new
                        {
                            Id = "bee855a3-a026-47da-b89a-a72bb6d9ba5d",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6614),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "The acceptance test does not necessarily include a regression test",
                            QuestionId = "e1a23107-a828-4106-a2fb-e3241647b0d0"
                        },
                        new
                        {
                            Id = "ec14e9c6-87f3-41b4-8b6d-7d094730d7b7",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6621),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Verification activities should not involve testers (reviews, inspections etc)",
                            QuestionId = "e1a23107-a828-4106-a2fb-e3241647b0d0"
                        },
                        new
                        {
                            Id = "70e4b173-28a6-407a-a95d-a4c391772967",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6632),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Test environments should be as similar to production environments as possible",
                            QuestionId = "e1a23107-a828-4106-a2fb-e3241647b0d0"
                        },
                        new
                        {
                            Id = "c7b9910d-e541-4764-81c4-076d80691978",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6639),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Faults in program specifications are the most expensive to fix",
                            QuestionId = "4f51da80-effa-428d-92a7-8c5feca3714e"
                        },
                        new
                        {
                            Id = "1bbb83ab-8439-452a-9580-f04360b8d4bd",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6645),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Faults in code are the most expensive to fix",
                            QuestionId = "4f51da80-effa-428d-92a7-8c5feca3714e"
                        },
                        new
                        {
                            Id = "fd127e1a-d1db-4dcb-9e0a-639a5e09d497",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6652),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "Faults in requirements are the most expensive to fix",
                            QuestionId = "4f51da80-effa-428d-92a7-8c5feca3714e"
                        },
                        new
                        {
                            Id = "7ae120d6-50ec-43b4-919b-adb7594744e9",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6658),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "Faults in designs are the most expensive to fix",
                            QuestionId = "4f51da80-effa-428d-92a7-8c5feca3714e"
                        },
                        new
                        {
                            Id = "10d4f82b-fa24-4776-b04c-704fedeaf466",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6665),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "an error",
                            QuestionId = "9fc5ab8d-e320-408e-a863-7ccd6b1e7094"
                        },
                        new
                        {
                            Id = "41cf7874-c11c-4fd6-b271-5d2e7f0413b8",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6674),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "a fault",
                            QuestionId = "9fc5ab8d-e320-408e-a863-7ccd6b1e7094"
                        },
                        new
                        {
                            Id = "7821aae1-81f6-45b7-b2c9-4baa4948380f",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6681),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "a failure",
                            QuestionId = "9fc5ab8d-e320-408e-a863-7ccd6b1e7094"
                        },
                        new
                        {
                            Id = "ec364aa3-b679-4947-9778-ad09018b5775",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6691),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "a defect",
                            QuestionId = "9fc5ab8d-e320-408e-a863-7ccd6b1e7094"
                        },
                        new
                        {
                            Id = "aa14edbb-d641-4939-af8b-ac484425c6e0",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6698),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "a mistake",
                            QuestionId = "9fc5ab8d-e320-408e-a863-7ccd6b1e7094"
                        },
                        new
                        {
                            Id = "a2f2d149-6505-4a9f-926c-56a8af408a7a",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6705),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "v & w are true, x – z are false",
                            QuestionId = "626cf1a3-edb8-4632-a02f-ca438502d997"
                        },
                        new
                        {
                            Id = "6f320c4f-cd92-46cf-84f2-3298e7a54f2b",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6712),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "w, x & y are true, v & z are false",
                            QuestionId = "626cf1a3-edb8-4632-a02f-ca438502d997"
                        },
                        new
                        {
                            Id = "8323e576-bea9-4ae5-a5e1-4c027dabae62",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6776),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "w & y are true, v, x & z are false",
                            QuestionId = "626cf1a3-edb8-4632-a02f-ca438502d997"
                        },
                        new
                        {
                            Id = "cc7132cd-e6b8-4fb2-a819-4a2665638ec0",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6783),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "w is true, v, x y and z are false",
                            QuestionId = "626cf1a3-edb8-4632-a02f-ca438502d997"
                        },
                        new
                        {
                            Id = "94678835-aaf4-4cac-b348-81c2b13eab04",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6790),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "all of the above are true",
                            QuestionId = "626cf1a3-edb8-4632-a02f-ca438502d997"
                        },
                        new
                        {
                            Id = "bc51a669-e351-4bd3-8183-c8c2bf4a2138",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6796),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "testing to see where the system does not function properly",
                            QuestionId = "8666811e-9b83-416b-8604-a1b573eb7cb5"
                        },
                        new
                        {
                            Id = "0a9a5f71-9d58-4c80-8a83-c1a9d540d424",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6806),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "testing quality attributes of the system including performance and usability",
                            QuestionId = "8666811e-9b83-416b-8604-a1b573eb7cb5"
                        },
                        new
                        {
                            Id = "4434840e-1a54-4c7e-a6e6-9ce957436f8a",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6813),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "testing a system feature using only the software required for that action",
                            QuestionId = "8666811e-9b83-416b-8604-a1b573eb7cb5"
                        },
                        new
                        {
                            Id = "963a0b1d-202b-44fc-b5e8-02c439f89e04",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6820),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "testing a system feature using only the software required for that function",
                            QuestionId = "8666811e-9b83-416b-8604-a1b573eb7cb5"
                        },
                        new
                        {
                            Id = "78d204e0-438c-41bc-b55f-6bbb7001fdce",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6827),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "testing for functions that should not exist",
                            QuestionId = "8666811e-9b83-416b-8604-a1b573eb7cb5"
                        },
                        new
                        {
                            Id = "dee4d46f-4fa2-4085-8e34-abed93569569",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6833),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "to know when a specific test has finished its execution",
                            QuestionId = "7d718fb2-e2b8-4d0b-94c7-9e6a268e6bf0"
                        },
                        new
                        {
                            Id = "58614372-15bc-48a1-bbac-f3e25054c2f1",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6839),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "to ensure that the test case specification is complete",
                            QuestionId = "7d718fb2-e2b8-4d0b-94c7-9e6a268e6bf0"
                        },
                        new
                        {
                            Id = "0f427a43-f819-4931-bd28-2af6f6e95ef7",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6846),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "to set the criteria used in generating test inputs",
                            QuestionId = "7d718fb2-e2b8-4d0b-94c7-9e6a268e6bf0"
                        },
                        new
                        {
                            Id = "e809d30b-1fa1-4aa4-81d3-792bc12a8388",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6852),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "to know when test planning is complete",
                            QuestionId = "7d718fb2-e2b8-4d0b-94c7-9e6a268e6bf0"
                        },
                        new
                        {
                            Id = "826b1757-eb53-4493-b0b5-332161a096fa",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6862),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "to plan when to stop testing",
                            QuestionId = "7d718fb2-e2b8-4d0b-94c7-9e6a268e6bf0"
                        },
                        new
                        {
                            Id = "b0e1d853-e4d0-4499-9d36-250ce1895f11",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6869),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = true,
                            Name = "expected outcomes are defined by the software’s behavior",
                            QuestionId = "e04a00de-7ec9-4071-af43-0f39c3e4fb75"
                        },
                        new
                        {
                            Id = "a1a26a3c-7ac9-4103-a2ea-8c4f189a2374",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6876),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "expected outcomes are derived from a specification, not from the code",
                            QuestionId = "e04a00de-7ec9-4071-af43-0f39c3e4fb75"
                        },
                        new
                        {
                            Id = "ea84723e-7930-4885-a9eb-507c03514466",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6883),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "expected outcomes include outputs to a screen and changes to files and databases",
                            QuestionId = "e04a00de-7ec9-4071-af43-0f39c3e4fb75"
                        },
                        new
                        {
                            Id = "6c6da1c4-5ee1-48b6-be00-884ee043396f",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6890),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "expected outcomes should be predicted before a test is run",
                            QuestionId = "e04a00de-7ec9-4071-af43-0f39c3e4fb75"
                        },
                        new
                        {
                            Id = "bb1718ee-3871-45c6-b873-847b1c1c1ac1",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(6896),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsCorrect = false,
                            Name = "expected outcomes may include timing constraints such as response times",
                            QuestionId = "e04a00de-7ec9-4071-af43-0f39c3e4fb75"
                        });
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.QuizQuestion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delete");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("last_updated_by");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = "df811d72-625a-4346-b9af-4da5f112d2e3",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4799),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "System testing should investigate"
                        },
                        new
                        {
                            Id = "5a9a2050-fe54-4ea0-b46e-4d22c9262c17",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4834),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Which is the non-functional testing"
                        },
                        new
                        {
                            Id = "3db86fc9-d498-4569-adf4-84af90ef0a72",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4849),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Bug life cycle (1M)"
                        },
                        new
                        {
                            Id = "28856ff5-c18b-42e3-aa99-158e53da22a8",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4862),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Which is not the software characteristics"
                        },
                        new
                        {
                            Id = "9eab715e-48bd-4fd3-896e-caecc38e0fe6",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4888),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Which is not the testing objectives"
                        },
                        new
                        {
                            Id = "d9fbec6c-5261-42c2-a00e-f16fc49a9cda",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4903),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Which is not the fundamental test process "
                        },
                        new
                        {
                            Id = "bf82b49c-458e-4a75-8d3b-fd055fbc8c5d",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4914),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Which of the following are valid objectives for testing?\r\ni. To find defects.\r\nii. To gain confidence in the level of quality.\r\niii. To identify the cause of defects.\r\niv. To prevent defects.\r\n"
                        },
                        new
                        {
                            Id = "45986160-b05c-47b8-8c41-ec779a4bd0bc",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4924),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Which of the following requirements would be tested by a functional system"
                        },
                        new
                        {
                            Id = "6b0db9f2-11c6-491b-9381-28a2f0089297",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4935),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Pick the best definition of quality"
                        },
                        new
                        {
                            Id = "6a2014ce-e8ea-458a-b254-e27a84220f6b",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(4949),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "One Key reason why developers have difficulty testing their own work is:"
                        },
                        new
                        {
                            Id = "ca131cf0-9120-4631-94b9-b623bb8f6966",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5108),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "During the software development process, at what point can the test process start?"
                        },
                        new
                        {
                            Id = "e8e31d2c-8ae3-4f87-90d1-838b04b0354b",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5148),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Acceptance test cases are based on what?"
                        },
                        new
                        {
                            Id = "8b7c48d2-5b18-4fa1-a866-799af5a8a795",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5160),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Faults found by users are due to:"
                        },
                        new
                        {
                            Id = "5dbe8215-8b4a-4643-8095-4bdd6e681b04",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5172),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "What is the main reason for testing software before releasing it?"
                        },
                        new
                        {
                            Id = "e1a23107-a828-4106-a2fb-e3241647b0d0",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5227),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Which of the following statements is not true"
                        },
                        new
                        {
                            Id = "4f51da80-effa-428d-92a7-8c5feca3714e",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5241),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Which of the following statements are true?"
                        },
                        new
                        {
                            Id = "9fc5ab8d-e320-408e-a863-7ccd6b1e7094",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5252),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "When what is visible to end-users is a deviation from the specific or expected behavior, this is called:"
                        },
                        new
                        {
                            Id = "626cf1a3-edb8-4632-a02f-ca438502d997",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5267),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Regression testing should be performed: \r\nv) every week\r\nw) after the software has changed\r\nx) as often as possible\r\ny) when the environment has changed\r\nz) when the project manager says\r\n"
                        },
                        new
                        {
                            Id = "8666811e-9b83-416b-8604-a1b573eb7cb5",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5278),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "Non-functional system testing includes:"
                        },
                        new
                        {
                            Id = "7d718fb2-e2b8-4d0b-94c7-9e6a268e6bf0",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5288),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "What is the purpose of test completion criteria in a test plan:"
                        },
                        new
                        {
                            Id = "e04a00de-7ec9-4071-af43-0f39c3e4fb75",
                            CreatedAt = new DateTime(2023, 7, 19, 10, 1, 38, 192, DateTimeKind.Local).AddTicks(5299),
                            CreatedBy = "0630c378-e8e4-414d-9257-ea2ae873d8f0",
                            IsDelete = false,
                            Name = "What statement about expected outcomes is FALSE:"
                        });
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.Tester", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("facebook_url");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("image_url");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("instagram_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("linkedin_url");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("national_id");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("phone_number")
                        .IsFixedLength();

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("TwitterUrl")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("twitter_url");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("YoutubeUrl")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("youtube_url");

                    b.Property<bool>("hasPassedQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("has_passed_quiz");

                    b.Property<bool>("hasPassedSampleTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("has_passed_sample_test");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00a8efe8-7a63-49c3-9a55-b395f26e6b72",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5f88d5a4-60ca-46b7-829d-596d343ed923",
                            ConcurrencyStamp = "2",
                            Name = "Tester",
                            NormalizedName = "TESTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.Device", b =>
                {
                    b.HasOne("Excallibur.Domain.Entites.Tester", "Tester")
                        .WithMany("Devices")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.Experience", b =>
                {
                    b.HasOne("Excallibur.Domain.Entites.Tester", "Tester")
                        .WithMany("Experiences")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.Qualification", b =>
                {
                    b.HasOne("Excallibur.Domain.Entites.Tester", "Tester")
                        .WithMany("Qualifications")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.QuizOption", b =>
                {
                    b.HasOne("Excallibur.Domain.Entites.QuizQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Excallibur.Domain.Entites.Tester", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Excallibur.Domain.Entites.Tester", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excallibur.Domain.Entites.Tester", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Excallibur.Domain.Entites.Tester", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.QuizQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Excallibur.Domain.Entites.Tester", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Experiences");

                    b.Navigation("Qualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
